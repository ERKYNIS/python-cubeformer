"""
–ü–æ—è—Å–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ pywebio:

    with use_scope('–Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏') - —Å–æ–∑–¥–∞—Ç—å –æ–±–ª–∞—Å—Ç—å.
    set_scope('–Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏', position=–ø–æ–∑–∏—Ü–∏—è) - –≤—ã–≤–µ—Å—Ç–∏ –æ–±–ª–∞—Å—Ç—å.
    clear('–Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏') - –æ—á–∏—Å—Ç–∏—Ç—å –æ–±–ª–∞—Å—Ç—å.
    remove('–Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏') - —É–¥–∞–ª–∏—Ç—å –æ–±–ª–∞—Å—Ç—å.


    input_group - –≥—Ä—É–ø–ø–∞ –ø–æ–ª–µ–π –¥–ª—è –≤–≤–æ–¥–∞:
        validate - –ø—Ä–æ–≤–µ—Ä–∫–∏.
        cancelable (True/False) - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã.

    input - –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞:
        name - –∏–º—è –ø–æ–ª—è (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–∫–∏).
        type - —Ç–∏–ø –ø–æ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä "Text" - —Ç–µ–∫—Å—Ç).
        required (True/False) - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –∏–ª–∏ –Ω–µ—Ç.

    radio - –ø–æ–ª–µ –¥–ª—è –≤—ã–±–æ—Ä–∞:
        options - –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞.

    toast - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.

    put_text - –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω —Ç–µ–∫—Å—Ç.
    put_markdown - –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫.
    put_loading - –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫—É.

    .style() - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∏–ª—è –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞).

    put_buttons - –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω –∫–Ω–æ–ø–∫–∏:
        label - —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ.
        value - –ø–æ—Ö–æ–∂–µ–µ –Ω–∞ "name" –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞.
        color - —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏.
        onclick - –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è.

    with popup('–Ω–∞–∑–≤–∞–Ω–∏–µ –æ–∫–Ω–∞') - —Å–æ–∑–¥–∞—Ç—å –æ–∫–Ω–æ (–æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å–≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞).
    close_popup() - –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ.


    run_async(—Ñ—É–∫–Ω—Ü–∏—è) - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ—É–∫–Ω—Ü–∏—é, —á—Ç–æ–±—ã —Å–∞–π—Ç –∂–¥–∞–ª –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä,
    –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).
"""
import datetime
import os
import sqlite3
import time
from random import sample

from pymorphy2 import MorphAnalyzer

morph = MorphAnalyzer()

import pywebio
from pywebio import start_server
from pywebio.input import *
from pywebio.output import *
from pywebio.session import run_async

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–∞–π—Ç–∞ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—ë–º–Ω–æ–π —Ç–µ–º—ã.
pywebio.config(title="Cube—Ñ–æ—Ä–º–µ—Ä", theme='dark')

database = sqlite3.connect('files/cubeformer.db')  # –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = database.cursor()


class Profile:  # –ö–ª–∞—Å—Å –ø—Ä–æ—Ñ–∏–ª—è
    def __init__(self):
        self.id = None
        self.name = None
        self.surname = None
        self.email = None
        self.gender = None
        self.role = None
        self.nick = None
        self.password = None
        self.auth_key = None

    async def register(self):  # –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        clear('login')
        clear('register')
        clear('main')
        set_scope('register', position=-1)
        with use_scope('register'):
            await input_group("‚ûï –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", [
                input('–í–∞—à –Ω–∏–∫–Ω–µ–π–º:', type=TEXT, name="nickname", validate=check_nickname,
                      required=True),
                input('–í–∞—à–µ –∏–º—è:', type=TEXT, name="name", required=True),
                input('–í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è:', type=TEXT, name="surname", required=True),
                radio("–í–∞—à –ø–æ–ª:", options=['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π'], name="gender", required=True),
                input('–í–∞—à–∞ –ø–æ—á—Ç–∞:', type=TEXT, name="email", validate=check_email),
                input('–ü–∞—Ä–æ–ª—å:', type=PASSWORD, name="password", required=True),
                input('–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å:', type=PASSWORD, name="test_password", required=True),
            ], validate=lambda regdata: self.check_reg_passwords(regdata['password'],
                                                                 regdata['test_password'],
                                                                 regdata['nickname'],
                                                                 regdata['name'],
                                                                 regdata['surname'],
                                                                 regdata['gender'],
                                                                 regdata['email'],
                                                                 regdata['password']))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    def check_reg_passwords(self, one, two, nickname, name, surname, gender, email, password):
        if one != two:
            return 'test_password', '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!'
        else:
            run_async(self.register_success(nickname, name, surname, gender, email, password))

    # –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:
    async def register_success(self, nickname, name, surname, gender, email, password):
        clear('register_success')
        set_scope('register_success', position=-1)
        db.execute("INSERT INTO `accounts` (`nickname`, `name`, `surname`, `gender`, `email`, "
                   "`password`, `role`) VALUES (?, ?, ?, ?, ?, ?, 'default')",
                   (nickname, name, surname, gender, email, password))
        database.commit()
        with use_scope('register_success'):
            toast(f'–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!', color='success')
            print(f'[SiteLog {datetime.datetime.now().strftime("%d.%m.%Y %H:%M:%S")}] '
                  f'–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {nickname}.')
            put_markdown('## –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!').style('color:green')
            put_markdown('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!').style('bold:true')
            put_text(' ')
            put_text('–¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç:')
        run_async(self.login())

    async def login(self):  # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        remove('login')
        await input_group("üë§ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", [
            input('–õ–æ–≥–∏–Ω (email –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º):', type=TEXT, name='test_email', required=True),
            input('–ü–∞—Ä–æ–ª—å:', type=PASSWORD, name='test_password', required=True),
        ], validate=lambda m2: self.check_login(m2['test_email'], m2['test_password']))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è –Ω–∞ —ç—Ç–∞–ø–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:
    def check_login(self, test_email_or_nick, test_password):
        db.execute('SELECT nickname FROM accounts WHERE email=?', (test_email_or_nick,))
        if not db.fetchone():
            db.execute('SELECT nickname FROM accounts WHERE nickname=?', (test_email_or_nick,))
            if not db.fetchone():
                return 'test_email', "‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω!"
            else:
                db.execute('SELECT password FROM accounts WHERE nickname=?', (test_email_or_nick,))
                if test_password != db.fetchall()[0][0]:
                    return 'test_password', "‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!"
                else:
                    toast(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {test_email_or_nick}! üëã', color='success')
                    run_async(self.get_information(test_email_or_nick, '–Ω–∏–∫–Ω–µ–π–º–∞'))
        else:
            db.execute('SELECT password FROM accounts WHERE email=?', (test_email_or_nick,))
            if test_password != db.fetchall()[0][0]:
                return 'test_password', "‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!"
            else:
                db.execute('SELECT nickname FROM accounts WHERE email=?', (test_email_or_nick,))
                username = db.fetchall()[0][0]
                toast(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}! üëã', color='success')
                run_async(self.get_information(username, '–ø–æ—á—Ç—ã'))

    async def get_information(self, nick, method=None):  # –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        clear('main')
        clear('login')
        clear('register')
        clear('register_success')
        clear('login_success')
        clear('login_history')
        with use_scope('login_success'):
            put_markdown('## –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è! üéâ').style('color:green')
            put_markdown('–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å! ‚úÖ').style('bold:true')
            put_text('–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞...')
            put_loading(color="success")
        self.nick = nick
        db.execute('SELECT * FROM accounts WHERE nickname=?', (self.nick,))
        data = db.fetchall()[0]
        self.id = data[0]
        self.name = data[2]
        self.surname = data[3]
        self.email = data[4]
        self.password = data[6]
        self.role = data[7]
        if data[5] == '–ú—É–∂—Å–∫–æ–π':
            self.gender = '–ú—É–∂—Å–∫–æ–π üë®'
        else:
            self.gender = '–ñ–µ–Ω—Å–∫–∏–π üë©'
        print(f'[SiteLog | {datetime.datetime.now().strftime("%d.%m.%Y %H:%M:%S")}] '
              f'–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –∞–∫–∫–∞—É–Ω—Ç {nick} —Å –ø–æ–º–æ—â—å—é {method}.')
        db.execute("INSERT INTO `login_history` ('time', `nickname`, 'method') "
                   "VALUES (?, ?, ?)", (datetime.datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
                                        nick, method))
        database.commit()
        time.sleep(3)
        clear('login_success')
        run_async(self.account_info())

    async def quit(self, notification=1):  # –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
        remove('info')
        remove('button_panel')
        remove('login_history')
        remove('user_reports')
        remove('crashes_list')
        self.id = None
        self.name = None
        self.surname = None
        self.email = None
        self.gender = None
        self.role = None
        self.password = None
        if notification:
            toast('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞! ‚úÖ', color='error')
            print(f'[SiteLog | {datetime.datetime.now().strftime("%d.%m.%Y %H:%M:%S")}] '
                  f'–ü—Ä–æ–∏–∑–≤–µ–¥—ë–Ω –≤—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ {self.nick}.')
        self.nick = None
        run_async(main())

    def button_panel(self, page=0):  # –§—É–Ω–∫—Ü–∏—è –ø–∞–Ω–µ–ª–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (—Å–≤–µ—Ä—Ö—É)
        remove('info')
        remove('games')
        remove('login_history')
        remove('user_reports')
        remove('crashes_list')
        remove('change_pass')
        remove('button_panel')
        with use_scope('button_panel'):
            lc = 'info'
            login_history_but = 'info'
            user_reports_but = 'info'
            crashes_list_but = 'info'
            games_list = 'info'

            if not page:
                lc = 'success'
            if page == 1:
                login_history_but = 'success'
            if page == 2:
                user_reports_but = 'success'
            if page == 3:
                crashes_list_but = 'success'
            if page == 4:
                games_list = 'success'

            if self.role == 'admin':
                put_buttons([dict(label='üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', value='lc', color=lc),
                             dict(label='üîì –ò—Å—Ç–æ—Ä–∏—è –≤—Ö–æ–¥–æ–≤', value='login_history',
                                  color=login_history_but),
                             dict(label='üéÆ –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä', value='games', color=games_list),
                             dict(label='‚ö† –°–ø–∏—Å–æ–∫ –∫—Ä–∞—à–µ–π', value='crashes_list',
                                  color=crashes_list_but),
                             dict(label='üõé –û–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', value='user_reports',
                                  color=user_reports_but),
                             dict(label='‚ùå –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞', value='quit',
                                  color='danger')],
                            onclick=[lambda: run_async(self.account_info()),
                                     lambda: run_async(self.login_history()),
                                     lambda: run_async(self.games()),
                                     lambda: run_async(self.crashes_list()),
                                     lambda: run_async(self.user_reports()),
                                     lambda: run_async(self.quit())], position=0)
            else:
                put_buttons([dict(label='üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', value='lc', color=lc),
                             dict(label='üîì –ò—Å—Ç–æ—Ä–∏—è –≤—Ö–æ–¥–æ–≤', value='login_history',
                                  color=login_history_but),
                             dict(label='üéÆ –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä', value='games', color=games_list),
                             dict(label='‚ö† –°–ø–∏—Å–æ–∫ –∫—Ä–∞—à–µ–π', value='crashes_list',
                                  color=crashes_list_but),
                             dict(label='‚ùå –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞', value='quit',
                                  color='danger')],
                            onclick=[lambda: run_async(self.account_info()),
                                     lambda: run_async(self.login_history()),
                                     lambda: run_async(self.games()),
                                     lambda: run_async(self.crashes_list()),
                                     lambda: run_async(self.quit())], position=0)

    async def account_info(self):  # –§—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
        self.button_panel()
        with use_scope('info'):
            put_markdown(f'## üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç | {self.nick} ({self.name} {self.surname}).')
            if self.role == 'default':
                user_role = put_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å üòé').style('color:green')
            elif self.role == 'admin':
                user_role = put_text('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üëÆ‚Äç‚ôÇ').style('color:#B22222')
            put_text('')
            put_table([
                ['üÜî:', f'‚Ññ{self.id}'],
                ['üé´ –ù–∏–∫–Ω–µ–π–º:', self.nick],
                ['üëî –î–æ–ª–∂–Ω–æ—Å—Ç—å:', user_role],
                ['üìã –ò–º—è:', self.name],
                ['üìã –§–∞–º–∏–ª–∏—è:', self.surname],
                ['üöª –ü–æ–ª:', self.gender]
            ], header=['üìò –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ:'])
            put_table([
                ['‚úâ –ü–æ—á—Ç–∞:', self.email],
                ['üîê –ü–∞—Ä–æ–ª—å:', put_buttons(
                    [dict(label='üîè –ò–∑–º–µ–Ω–∏—Ç—å', value='edit', color='warning'), ],
                    onclick=[lambda: run_async(self.change_pass())])],
                ['üîë –ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞:', put_buttons(
                    [dict(label='üôè –ü–æ–ª—É—á–∏—Ç—å', value='get', color='success'), ],
                    onclick=[lambda: run_async(self.get_auth_key())])]
            ],
                header=['üìô –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:'])
            put_buttons([
                dict(label='‚ùå –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞', value='quit', color='danger'),
            ], onclick=[lambda: run_async(self.quit())])
            await pywebio.session.hold()
        put_text('')

    async def get_auth_key(self, ans=0):  # –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞
        if not ans:
            close_popup()
            with popup('üîë –ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞'):
                put_text('–í–∞—à –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞:')
                put_loading(color="info")
                await getting_auth_key()
        if ans:
            time.sleep(1)
            close_popup()
            with popup('üîë –ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞'):
                put_text('–í–∞—à –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞:')
                put_markdown(f'## {self.auth_key}').style('color:orange')
                put_text('–î–∞–Ω–Ω—ã–π –∫–ª—é—á –¥–µ–π—Å—Ç–≤—É–µ—Ç 1 –º–∏–Ω—É—Ç—É.').style('color:red')
            for i in range(60):
                db.execute('SELECT authkey FROM accounts WHERE nickname=? AND authkey=?',
                           (self.nick, self.auth_key))
                if not db.fetchall():
                    break
                time.sleep(1)
            print(1)
            db.execute("UPDATE `accounts` SET authkey=NULL WHERE nickname=?", (self.nick,))
            database.commit()
            close_popup()
            with popup('üîë –ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞'):
                put_text('–í–∞—à –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –∏—Å—Ç—ë–∫ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!').style('color:red')
                put_button('üôè –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π', color='warning',
                           onclick=lambda: self.get_auth_key(ans=0))

    async def change_pass(self):  # –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
        with use_scope('change_pass'):
            await input_group("üîè –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è", [
                input('–°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å:', type=TEXT, name="old_pass",
                      required=True),
                input('–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:', type=TEXT, name="pass", required=True),
                input('–ü–æ–≤—Ç–æ—Ä –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è', type=TEXT, name="pass2", required=True),
            ], validate=lambda dt: self.pass_validate(dt['old_pass'], dt['pass'], dt['pass2']),
                              cancelable=True)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è –Ω–∞ —ç—Ç–∞–ø–µ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è:
    def pass_validate(self, old_pass, new_pass, new_pass2):
        if self.password != old_pass:
            return 'old_pass', "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!"
        elif new_pass != new_pass2:
            return 'pass2', "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!"
        else:
            db.execute("UPDATE `accounts` SET password=? WHERE nickname=?", (new_pass, self.nick,))
            database.commit()
            self.password = new_pass
            toast('–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –ø–∞—Ä–æ–ª—å!', color='success')
            remove('change_pass')
            toast('–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å.', color='orange')
            run_async(self.quit(0))
            print(f'[SiteLog | {datetime.datetime.now().strftime("%d.%m.%Y %H:%M:%S")}] '
                  f'–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {self.nick}.')

    async def login_history(self):  # –§—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π –≤—Ö–æ–¥–æ–≤
        self.button_panel(1)
        with use_scope('login_history'):
            db.execute('SELECT * FROM login_history WHERE nickname=? ORDER by time DESC',
                       (self.nick,))
            data = db.fetchall()
            for i in range(len(data)):
                if i == 0:
                    put_table([
                        ['–° –ø–æ–º–æ—â—å—é', f'{data[i][2]}'],
                    ], header=[f'{data[i][0]} (—Ç–µ–∫—É—â–∏–π)'])
                else:
                    put_table([
                        ['–° –ø–æ–º–æ—â—å—é', f'{data[i][2]}'],
                    ], header=[data[i][0]])
        await pywebio.session.hold()

    async def games(self):  # –§—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –æ–±—Ä–∞—â–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.button_panel(4)
        with use_scope('games'):
            db.execute('SELECT * FROM games WHERE acc_nick=? ORDER by id', (self.nick,))
            data = db.fetchall()
            put_text()
            put_text(f'üéÆ –í—Å–µ–≥–æ {len(data)} '
                     f'{morph.parse("–∏–≥—Ä–∞")[0].make_agree_with_number(len(data))[0]}:')
            if len(data) < 1:
                put_text('')
                put_text(f'–ò–≥—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! ‚ùå').style('color:red')
            else:
                for i in range(len(data)):
                    put_text()
                    if data[i][6] == '–ö—Ä–∞—à':
                        result = put_text("–ö–†–ê–® ‚ö†").style("color:red")
                    elif data[i][6] == '–í—ã—Ö–æ–¥':
                        result = put_text("–í–´–•–û–î ‚ùå").style("color:red")
                    elif data[i][6] == '–í –ø—Ä–æ—Ü–µ—Å—Å–µ':
                        result = put_text("–í –ø—Ä–æ—Ü–µ—Å—Å–µ üïπ").style("color:green")
                    elif data[i][6] == '–ü–æ–±–µ–¥–∞':
                        result = put_text("–ü–æ–±–µ–¥–∞ ü•á").style("color:yellow")
                    put_table([
                        ['üÜî –≤ —Å–∏—Å—Ç–µ–º–µ:', f'‚Ññ{data[i][0]}'],
                        ['‚åö –î–∞—Ç–∞/–≤—Ä–µ–º—è:', f'{data[i][7]}'],
                        [put_text('üë§ –ò–≥—Ä–æ–∫ ‚Ññ1:').style("color:red"), f'{data[i][2]}'],
                        [put_text('üë§ –ò–≥—Ä–æ–∫ ‚Ññ2:').style("color:green"), f'{data[i][3]}'],
                        ['üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç:', result]
                    ], header=[f'‚Ññ{i + 1}'])
        await pywebio.session.hold()

    async def user_reports(self):  # –§—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –æ–±—Ä–∞—â–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.button_panel(2)
        with use_scope('user_reports'):
            db.execute('SELECT * FROM reports ORDER by id')
            data = db.fetchall()
            put_text(f'üõé –í—Å–µ–≥–æ {len(data)} '
                     f'{morph.parse("–æ–±—Ä–∞—â–µ–Ω–∏–µ")[0].make_agree_with_number(len(data))[0]}:')
            if len(data) < 1:
                put_text('')
                put_text(f'–û–±—Ä–∞—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! ‚ùå').style('color:success')
            else:
                for i in range(len(data)):
                    put_table([
                        ['‚åö –î–∞—Ç–∞/–≤—Ä–µ–º—è:', f'{data[i][1]}'],
                        ['üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', f'{data[i][2]}'],
                        ['‚úâ –ü–æ—á—Ç–∞:', put_link(data[i][3], f"mailto:{data[i][3]}", new_window=True)],
                        ['üìñ –û–±—Ä–∞—â–µ–Ω–∏–µ:', f'{data[i][4]}']
                    ], header=[f'‚Ññ{data[i][0]}'])
                    put_buttons([
                        dict(label="–£–¥–∞–ª–∏—Ç—å", value='del', color='danger')
                    ], onclick=[lambda x=data[i][0]: run_async(self.del_report(data[i][0]))])
        await pywebio.session.hold()

    async def del_report(self, repid, ans=0):  # –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è
        if not ans:
            with popup('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è'):
                put_markdown('## ‚ö† –í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å!').style('color:red')
                put_text(f'–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{repid}?').style('color:yellow')
                put_buttons([
                    dict(label='–î–∞', value='yes', color='danger'),
                    dict(label='–ù–µ—Ç', value='no', color='success')
                ], onclick=[lambda: run_async(self.del_report(repid, ans=1)),
                            lambda: close_popup()])
        if ans:
            db.execute("DELETE FROM reports WHERE id=?", (repid,))
            database.commit()
            close_popup()
            toast(f'–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{repid}! ‚úÖ', color='warning')
            run_async(self.user_reports())

    async def crashes_list(self):  # –§—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ª–æ–≥–∞–º–∏ –∫—Ä–∞—à–µ–π
        remove('check_crash')
        self.button_panel(3)
        with use_scope('crashes_list'):
            put_text('')
            if not os.path.exists('crashes'):
                put_text(f'‚ö† –í—Å–µ–≥–æ 0 –ª–æ–≥–æ–≤ –∫—Ä–∞—à–µ–π:')
                put_text(f'–õ–æ–≥–æ–≤ –∫—Ä–∞—à–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! ‚ùå').style('color:success')
            else:
                put_text(f'‚ö† –í—Å–µ–≥–æ {len(os.listdir("crashes"))} '
                         f'{morph.parse("–ª–æ–≥")[0].make_agree_with_number(len(os.listdir("crashes")))[0]}'
                         f' –∫—Ä–∞—à–µ–π:')
                file_num = 0
                if len(os.listdir("crashes")) < 0:
                    put_text(f'–õ–æ–≥–æ–≤ –∫—Ä–∞—à–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! ‚ùå').style('color:success')
                else:
                    for file in os.listdir("crashes"):
                        content = open(f'./crashes/{file}', 'rb').read()
                        put_table([
                            [put_file(f'{file}', content), put_buttons([
                                dict(label="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å üìÉ", value='view', color='info')
                            ], onclick=[lambda x=file: run_async(self.check_crash(x))])]
                        ], header=[f'‚Ññ{file_num + 1}'])
                        file_num += 1
        await pywebio.session.hold()

    async def check_crash(self, name, act=0):  # –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–∞ –∫—Ä–∞—à–∞
        remove('crashes_list')
        remove('button_panel')
        if not act:
            with use_scope('check_crash'):
                put_buttons([
                    dict(label='‚Ü© –ù–∞–∑–∞–¥', value='back', color='warning'),
                ], onclick=[lambda: run_async(self.crashes_list())])
                with open(f'crashes/{name}', 'r') as crash_file:
                    put_text(f'crashes/{name}:')
                    put_code(crash_file.read())
                put_buttons([
                    dict(label='–£–¥–∞–ª–∏—Ç—å ‚ùå', value='del', color='danger'),
                ], onclick=[lambda: run_async(self.check_crash(name, 1))])
        if act == 1:
            with popup('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –ª–æ–≥–∞ –∫—Ä–∞—à–∞'):
                put_markdown('## ‚ö† –í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å!').style('color:red')
                put_text(f'–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ª–æ–≥ –∫—Ä–∞—à–∞ crashes/{name}?').style('color:yellow')
                put_buttons([
                    dict(label='–î–∞', value='yes', color='danger'),
                    dict(label='–ù–µ—Ç', value='no', color='success')
                ], onclick=[lambda: run_async(self.check_crash(name, 2)),
                            lambda: close_popup()])
        if act == 2:
            os.remove(f'crashes/{name}')
            if len(os.listdir("crashes")) < 1:
                os.rmdir('crashes')
            toast(f'–õ–æ–≥ –∫—Ä–∞—à–∞ crashes/{name} —É–¥–∞–ª—ë–Ω! ‚úÖ', color='orange')
            close_popup()
            run_async(self.crashes_list())
        await pywebio.session.hold()


profile = Profile()


async def main():  # –§—É–Ω–∫—Ü–∏—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    close_popup()
    clear('login')
    image_url = "https://i.imgur.com/zJjN0ZH.png"
    pywebio.session.run_js("""
        $('#favicon32,#favicon16').remove(); 
        $('head').append('<link rel="icon" type="image/png" href="%s">')
        """ % image_url)
    clear('main')
    set_scope('main', position=0)
    with use_scope('main'):
        put_markdown('## Cube—Ñ–æ—Ä–º–µ—Ä | –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.')
        put_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')
        put_buttons(['‚ûï –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', 'üë§ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'],
                    onclick=[lambda: run_async(profile.register()),
                             lambda: run_async(profile.login())])
    put_text('')
    await pywebio.session.hold()


def check_nickname(nickname):  # –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∏–∫–Ω–µ–π–º–∞
    if ' ' in nickname or '-' in nickname or '!' in nickname or \
            '"' in nickname or "'" in nickname or '%' in nickname or ';' in nickname or \
            ':' in nickname or '*' in nickname or '&' in nickname or '{' in nickname or \
            '}' in nickname or '[' in nickname or ']' in nickname or ',' in nickname or \
            '/' in nickname or '<' in nickname or '>' in nickname or '|' in nickname or \
            '/' in nickname or '\n' in nickname or '+' in nickname or '=' in nickname or \
            '"' in nickname:
        return '‚ö† –ù–∏–∫ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä, ' \
               '–±—É–∫–≤ –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, —Ç–∞–∫–∏—Ö –∫–∞–∫ _ @ $ ( ) .'
    if len(nickname) > 30:
        return '‚ö† –ù–∏–∫ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –º–∞–∫—Å–∏–º—É–º –∏–∑ 30 —Å–∏–º–≤–æ–ª–æ–≤!'
    if len(nickname) < 4:
        return '‚ö† –ù–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –º–∏–Ω–∏–º—É–º –∏–∑ 4 —Å–∏–º–≤–æ–ª–æ–≤!'
    db.execute("SELECT nickname FROM accounts WHERE nickname=?", (nickname,))
    result = db.fetchone()
    if result:
        return '‚ö† –î–∞–Ω–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!'


def check_gender(gender):  # –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–∞
    if not gender:
        return '‚ö† –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞!'


def check_email(email):  # –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã
    if email and "@" not in email:
        return '‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã (–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ø–æ—á—Ç–∞@pocha.ru | vasya@gmail.com)!'
    else:
        db.execute("SELECT email FROM accounts WHERE email=?", (email,))
        result = db.fetchone()
        if result:
            return '‚ö† –î–∞–Ω–Ω–∞—è –ø–æ—á—Ç–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!'


async def getting_auth_key():  # –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å)
    chars = 'abcdefghijklnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
    checked_authkey = ''.join(sample(chars, 15))
    db.execute('SELECT authkey FROM accounts WHERE authkey=?', (checked_authkey,))
    while db.fetchall():
        checked_authkey = ''.join(sample(chars, 15))
        db.execute('SELECT authkey FROM accounts WHERE authkey=?', (checked_authkey,))

    small_letter = 0
    big_letter = 0
    num = 0
    while small_letter < 5 or big_letter < 5 or num < 5:
        small_letter = 0
        big_letter = 0
        num = 0
        checked_authkey = ''.join(sample(chars, 15))
        for symbol in checked_authkey:
            if symbol in 'abcdefghijklnopqrstuvwxyz':
                small_letter += 1
            elif symbol in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':
                big_letter += 1
            elif symbol in '0123456789':
                num += 1

    db.execute("UPDATE `accounts` SET authkey=? WHERE nickname=?", (checked_authkey, profile.nick,))
    database.commit()
    profile.auth_key = checked_authkey
    run_async(profile.get_auth_key(ans=1))


if __name__ == "__main__":  # –ó–∞–ø—É—Å–∫ —Å–∞–π—Ç–∞
    try:
        print(f'\n[SiteLog | {datetime.datetime.now().strftime("%d.%m.%Y %H:%M:%S")}] '
              f'–°–∞–π—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω. '
              f'–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ http://localhost:8080/, —á—Ç–æ–±—ã –∑–∞–π—Ç–∏.\n')
        start_server(main, port=8080, websocket_ping_interval=30, session_expire_seconds=999999,
                     session_cleanup_interval=999999)
        """
        start_server - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∞–π—Ç:
            main - —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
            port - –ø–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–∞–π—Ç
            websocket_ping_interval - '–ø–∏–Ω–≥—É–µ—Ç' –∫–∞–∂–¥—ã–µ n —Å–µ–∫—É–Ω–¥ –≤—Å–µ –≤–µ–± —Å–æ–∫–µ—Ç—ã 
            (–ø–æ–º–æ–≥–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä—ã, 
            –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫—Ä—ã–≤–∞—é—Ç –Ω–µ–∑–∞–Ω—è—Ç—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è).
            session_expire_seconds - –≤—Ä–µ–º—è –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–º 
            –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏).
            session_cleanup_interval - –≤—Ä–µ–º—è –¥–æ –æ—á–∏—Å—Ç–∫–∏ —Å–µ–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
    except Exception:
        print()
        print(f'[SiteLog | {datetime.datetime.now().strftime("%d.%m.%Y %H:%M:%S")}] '
              f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–ª–∏ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∞–π—Ç–∞.')
        print()
